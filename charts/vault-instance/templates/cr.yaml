apiVersion: "vault.banzaicloud.com/v1alpha1"
kind: "Vault"
metadata:
  name: "{{ .Release.Name }}"
spec:
  size: {{ .Values.size }}
  image: {{ .Values.image }}
  # specify a custom bank-vaults image with bankVaultsImage:
  # bankVaultsImage: ghcr.io/banzaicloud/bank-vaults:latest
  # Common annotations for all created resources
  annotations:
    common/annotation: "true"
  affinity:
{{ toYaml .Values.affinity | indent 4 }}    
  # Vault Pods , Services and TLS Secret annotations
  vaultAnnotations:
    type/instance: "vault"
{{- if .Values.vaultAnnotations }}
{{ toYaml .Values.vaultAnnotations | indent 4 }}
{{- end }}
  # Vault Configurer Pods and Services annotations
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"

  # Vault Pods , Services and TLS Secret labels
  vaultLabels:
    example.com/log-format: "json"

  # Vault Configurer Pods and Services labels
  vaultConfigurerLabels:
    example.com/log-format: "string"

  # Specify the ServiceAccount where the Vault Pod and the Bank-Vaults configurer/unsealer is running
  serviceAccount: vault

  # Specify the Service's type where the Vault Service is exposed
  # Please note that some Ingress controllers like https://github.com/kubernetes/ingress-gce
  # forces you to expose your Service on a NodePort
  serviceType: NodePort

  # Specify existing secret contains TLS certificate (accepted secret type: kubernetes.io/tls)
  # If it is set, generating certificate will be disabled
  # {{- if and .Values.existingTlsSecretName }}
  # existingTlsSecretName: {{ .Values.existingTlsSecretName }}
  # #existingTlsSecretName: vault-cert-tls
  # {{- end }}
  # Specify threshold for renewing certificates. Valid time units are "ns", "us", "ms", "s", "m", "h".
  # tlsExpiryThreshold: 168h
  # # Request an Ingress controller with the default configuration
  ingress:
    # Specify Ingress object annotations here, if TLS is enabled (which is by default)
    # the operator will add NGINX, Traefik and HAProxy Ingress compatible annotations
    # to support TLS backends
{{- if .Values.jxRequirements.ingress.annotations }}
    annotations:
{{ toYaml .Values.jxRequirements.ingress.annotations | indent 6 }}
{{- end }}
    # Override the default Ingress specification here
    # This follows the same format as the standard Kubernetes Ingress
    # See: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.13/#ingressspec-v1beta1-extensions
    spec:
      rules:
      - host: "vault-{{ .Release.Namespace }}.{{ .Values.jxRequirements.ingress.domain }}"
        http:
          paths:
            path: /
            pathType: Prefix
            backend:
              service:
                name: vault
                port:
                  number: 8200

  {{- if .Values.primary }}
  raftLeaderAddress: self
  {{- else }}
  raftLeaderAddress: {{ .Values.raftLeaderAddress }} 
  {{- end }}
  # Use local disk to store Vault file data, see config section.
  volumeClaimTemplates:
    - metadata:
        name: vault-raft
      spec:
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: 1Gi
  volumeMounts:
    - name: vault-raft
      mountPath: /vault/file
{{- if not .Values.primary }}
  bankVaultsVolumeMounts:
    - name: vault-raft-tls
      mountPath: /vault/raft-tls/
  volumes:
    - name: vault-raft-tls
      secret:
        secretName: vault-tls
  envsConfig:
    - name: VAULT_RAFT_CACERT
      value: /vault/raft-tls/ca.crt
{{- end }}
  veleroEnabled: false

  # Support for distributing the generated CA certificate Secret to other namespaces.
  # Define a list of namespaces or use ["*"] for all namespaces.
  caNamespaces:
    - "*"

  # Support for adding hostnames and IPs to the generated CA certificate.
  # tlsAdditionalHosts:
  #   - vault.{{ .Release.Namespace }}.svc.cluster.local
  #   {{- range $key, $region :=  .Values.multiRegion }}
  #   {{- range $i := until 3 }}
  #   - "vault-{{ $region }}-{{ . }}.{{ $.Release.Namespace }}.svc.cluster.local"
  #   {{- end }} 
  #   {{- end }} 

  # Describe where you would like to store the Vault unseal keys and root token.
  unsealConfig:
    options:
      # The preFlightChecks flag enables unseal and root token storage tests
      # This is true by default
      preFlightChecks: true
      # The storeRootToken flag enables storing of root token in chosen storage
      # This is true by default
      storeRootToken: true
    kubernetes:
      secretNamespace: "{{ .Release.Namespace }}"
      secretName: "vault-unseal-keys"

  # A YAML representation of a final vault config file.
  # See https://www.vaultproject.io/docs/configuration/ for more information.
  config:
    storage:
      raft:
        path: /vault/file
    listener:
      tcp:
        address: "0.0.0.0:8200"
        # Uncommenting the following line and deleting tls_cert_file and tls_key_file disables TLS
        # tls_disable: true
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    api_addr: https://{{ .Values.apiAddr }}.{{ .Release.Namespace }}.svc.cluster.local:8200
    cluster_addr: "https://${.Env.POD_NAME}.{{ .Release.Namespace }}.svc.cluster.local:8201"
    telemetry:
      statsd_address: localhost:9125
    ui: true
    disable_mlock: {{ .Values.disable_mlock }}

  # See: https://banzaicloud.com/docs/bank-vaults/cli-tool/#example-external-vault-configuration
  # The repository also contains a lot examples in the test/deploy and operator/deploy directories.
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
      - name: allow_pki
        rules: path "pki/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }

    # auth:
    #   - type: kubernetes
    #     path: /sgp1
    #     roles:
    #       # Allow every pod in the default namespace to use the secret kv store
    #       - name: default
    #         bound_service_account_names: ["default", "vault-secrets-webhook", "vault"]
    #         bound_service_account_namespaces: ["default", "vswh", "{{ .Release.Namespace }}"]
    #         policies: ["allow_secrets", "allow_pki"]
    #         ttl: 1h
    #       - name: vault-secrets-webhook
    #         bound_service_account_names: ["*"]
    #         bound_service_account_namespaces: ["*"]
    #         policies: ["allow_secrets", "allow_pki"]
    #         ttl: 1h
    #   - type: kubernetes
    #     path: /sbg5
    #     roles:
    #       # Allow every pod in the default namespace to use the secret kv store
    #       - name: default
    #         bound_service_account_names: ["default", "vault-secrets-webhook", "vault"]
    #         bound_service_account_namespaces: ["default", "vswh", "{{ .Release.Namespace }}"]
    #         policies: ["allow_secrets", "allow_pki"]
    #         ttl: 1h
    #       - name: vault-secrets-webhook
    #         bound_service_account_names: ["*"]
    #         bound_service_account_namespaces: ["*"]
    #         policies: ["allow_secrets", "allow_pki"]
    #         ttl: 1h     
    # secrets:
    #   - path: secret
    #     type: kv
    #     description: General secrets.
    #     options:
    #       version: 2
    #   - path: pki
    #     type: pki
    #     description: Vault PKI Backend
    #     config:
    #       default_lease_ttl: 168h
    #       max_lease_ttl: 720h
    #     configuration:
    #       config:
    #       - name: urls
    #         issuing_certificates: https://{{ .Values.apiAddr }}.{{ .Release.Namespace }}:8200/v1/pki/ca
    #         crl_distribution_points: https://{{ .Values.apiAddr }}.{{ .Release.Namespace }}:8200/v1/pki/crl
    #       root/generate:
    #       - name: internal
    #         common_name: "{{ .Values.apiAddr }}.{{ .Release.Namespace }}"
    #       roles:
    #       - name: default
    #         allowed_domains: localhost,pod,svc,default,{{ .Release.Namespace }}
    #         allow_subdomains: true
    #         generate_lease: true
    #         ttl: 1m
  vaultEnvsConfig:
    - name: VAULT_LOG_LEVEL
      value: {{ .Values.logLevel }}


  # Allows writing some secrets to Vault (useful for development purposes).
  # See https://www.vaultproject.io/docs/secrets/kv/index.html for more information.
  # startupSecrets:
  #   - type: kv
  #     path: secret/data/accounts/aws
  #     data:
  #       data:
  #         AWS_ACCESS_KEY_ID: secretId
  #         AWS_SECRET_ACCESS_KEY: s3cr3t
  #   - type: kv
  #     path: secret/data/dockerrepo
  #     data:
  #       data:
  #         DOCKER_REPO_USER: dockerrepouser
  #         DOCKER_REPO_PASSWORD: dockerrepopassword
  #   - type: kv
  #     path: secret/data/mysql
  #     data:
  #       data:
  #         MYSQL_ROOT_PASSWORD: s3cr3t
  #         MYSQL_PASSWORD: 3xtr3ms3cr3t
  serviceRegistrationEnabled: {{ .Values.serviceRegistrationEnabled}}
  # If you are using a custom certificate and are setting the hostname in a custom way
  # sidecarEnvsConfig:
  #   - name: VAULT_ADDR
  #     value: https://vault.local:8200

  # # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  # vaultPodSpec:
  #   hostAliases:
  #   - ip: "127.0.0.1"
  #     hostnames:
  #     - "vault.local"

  vaultContainerSpec:
    name: ''
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
  # It is possible to override the Vault container directly:
  # vaultContainerSpec:
  #   lifecycle:
  #     postStart:
  #       exec:
  #         command:
  #              - setcap cap_ipc_lock=+ep /vault/plugins/orchestrate

  # Marks presence of Istio, which influences things like port namings
  istioEnabled: false

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: vault-file
# spec:
#   # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#class-1
#   # storageClassName: ""
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: vault-file
# spec:
#   capacity:
#     storage: 1Gi
#   accessModes:
#   - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Recycle
#   hostPath:
#     path: /vault/file

